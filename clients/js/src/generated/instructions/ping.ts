/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { PING_PROGRAM_PROGRAM_ADDRESS } from '../programs';

export type PingInstruction<
  TProgram extends string = typeof PING_PROGRAM_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type PingInstructionData = { discriminator: number };

export type PingInstructionDataArgs = {};

export function getPingInstructionDataEncoder(): Encoder<PingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getPingInstructionDataDecoder(): Decoder<PingInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getPingInstructionDataCodec(): Codec<
  PingInstructionDataArgs,
  PingInstructionData
> {
  return combineCodec(
    getPingInstructionDataEncoder(),
    getPingInstructionDataDecoder()
  );
}

export type PingInput = {};

export function getPingInstruction(
  _input: PingInput
): PingInstruction<typeof PING_PROGRAM_PROGRAM_ADDRESS> {
  // Program address.
  const programAddress = PING_PROGRAM_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getPingInstructionDataEncoder().encode({}),
  } as PingInstruction<typeof PING_PROGRAM_PROGRAM_ADDRESS>;

  return instruction;
}

export type ParsedPingInstruction<
  TProgram extends string = typeof PING_PROGRAM_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: PingInstructionData;
};

export function parsePingInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedPingInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getPingInstructionDataDecoder().decode(instruction.data),
  };
}
